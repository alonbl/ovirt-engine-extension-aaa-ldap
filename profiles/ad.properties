#
# Copyright 2012-2015 Red Hat Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#

#
# Active Directory configuration. 
# Supported: Active Directory 2003 R2 and above.
#
# In order to support cross forest trust, gssapi authentication must be used.
#
# To support mapping of upn suffixes set ad_upn_suffix_mapping with form of:
#   upn-suffix=global catalog dn
# Example:
#   sequence-init.init.100-local_init_upn_suffixes = local_init_upn_suffixes
#   sequence.local_init_upn_suffixes.010.description = initialize upn suffixes mapping
#   sequence.local_init_upn_suffixes.010.type = var-list-set
#   sequence.local_init_upn_suffixes.010.var-list-set.variable = ad_upn_suffix_mapping
#   sequence.local_init_upn_suffixes.010.var-list-set.values.00.value = upn.com=DC=domain,DC=com
#

include = <common.properties>

vars.ADS_GROUP_TYPE_SECURITY_ENABLED = 2147483648
vars.SAM_NORMAL_USER_ACCOUNT = 805306368
vars.LDAP_MATCHING_RULE_BIT_AND = 1.2.840.113556.1.4.803
vars.LDAP_MATCHING_RULE_BIT_OR = 1.2.840.113556.1.4.804
vars.LDAP_MATCHING_RULE_IN_CHAIN = 1.2.840.113556.1.4.1941

vars.ad-principal-record = objectGUID, userPrincipalName, name, displayName, department, givenName, sn, title, mail
vars.ad-group-record = objectGUID, name, description

pool.default.dc-resolve.enable = true
pool.authz.auth.type = simple
pool.gc.auth.type = simple
pool.gc.serverset.srvrecord.domain-conversion.prep.type = regex
pool.gc.serverset.srvrecord.domain-conversion.prep.regex.pattern = ^(?<domain>.*)$
pool.gc.serverset.srvrecord.domain-conversion.prep.regex.replacement = gc._msdcs.${domain}
pool.gc.serverset.single.port = 3268

attrmap.map-principal-record.attr.PrincipalRecord_DN.map = _dn
attrmap.map-principal-record.attr.PrincipalRecord_ID.map = objectGUID
attrmap.map-principal-record.attr.PrincipalRecord_ID.conversion = BASE64
attrmap.map-principal-record.attr.PrincipalRecord_NAME.map = name
attrmap.map-principal-record.attr.PrincipalRecord_PRINCIPAL.map = userPrincipalName
attrmap.map-principal-record.attr.PrincipalRecord_DISPLAY_NAME.map = displayName
attrmap.map-principal-record.attr.PrincipalRecord_DEPARTMENT.map = department
attrmap.map-principal-record.attr.PrincipalRecord_FIRST_NAME.map = givenName
attrmap.map-principal-record.attr.PrincipalRecord_LAST_NAME.map = sn
attrmap.map-principal-record.attr.PrincipalRecord_TITLE.map = title
attrmap.map-principal-record.attr.PrincipalRecord_EMAIL.map = mail

attrmap.map-group-record.attr.GroupRecord_DN.map = _dn
attrmap.map-group-record.attr.GroupRecord_ID.map = objectGUID
attrmap.map-group-record.attr.GroupRecord_ID.conversion = BASE64
attrmap.map-group-record.attr.GroupRecord_NAME.map = name
attrmap.map-group-record.attr.GroupRecord_DISPLAY_NAME.map = description

auth-check.ad-authn.pool = authn
auth-check.ad-authn.reuse-connections = true
auth-check.ad-authn.user = ${seq:PrincipalRecord_PRINCIPAL}
auth-check.ad-authn.password = ${seq:password}

search.ad-rootdse.pool = authz
search.ad-rootdse.dc-resolve.override = ${seq:_ad_rootdse_dc_override}
search.ad-rootdse.search-request.baseDN =
search.ad-rootdse.search-request.scope = BASE
search.ad-rootdse.search-request.filter = &(objectClass=*)
search.ad-rootdse.search-request.attributes = defaultNamingContext, configurationNamingContext, rootDomainNamingContext

search.ad-resolve-upn.pool = gc
search.ad-resolve-upn.dc-resolve.override = ${seq:_ad_gc_dn}
search.ad-resolve-upn.search-request.baseDN =
search.ad-resolve-upn.search-request.filter = &(userPrincipalName=${seq:PrincipalRecord_PRINCIPAL})
search.ad-resolve-upn.search-request.attributes = cn
search.ad-resolve-upn.attrmap = map-principal-record

search.ad-domain-by-base.pool = authz
search.ad-domain-by-base.search-request.baseDN = CN=Partitions,${seq:_ad_configDN}
search.ad-domain-by-base.search-request.filter = &(objectClass=crossRef)(nCName=${seq:_ad_baseDN_encoded})(nETBIOSName=*)
search.ad-domain-by-base.search-request.attributes = nCName, dnsRoot

search.ad-trust-domains.pool = gc
search.ad-trust-domains.dc-resolve.enable = false
search.ad-trust-domains.search-request.baseDN =
search.ad-trust-domains.search-request.filter = &(objectClass=trustedDomain)
search.ad-trust-domains.search-request.attributes = name

search.ad-principal-fetch.pool = authz
search.ad-principal-fetch.search-request.baseDN = ${seq:PrincipalRecord_DN}
search.ad-principal-fetch.search-request.scope = BASE
search.ad-principal-fetch.search-request.filter = &(objectClass=*)
search.ad-principal-fetch.search-request.attributes = ${global:vars.ad-principal-record}
search.ad-principal-fetch.attrmap = map-principal-record

search.ad-resolve-groups.pool = ${seq:_ad_pool}
search.ad-resolve-groups.dc-resolve.override = ${seq:_ad_gc_dn}
search.ad-resolve-groups.search-request.baseDN = ${seq:_ad_baseDN}
search.ad-resolve-groups.search-request.filter = &(objectCategory=group)(groupType:${global:vars.LDAP_MATCHING_RULE_BIT_AND}:=${global:vars.ADS_GROUP_TYPE_SECURITY_ENABLED})(member=${seq:_ad_dn_encoded})
search.ad-resolve-groups.search-request.attributes = ${global:vars.ad-group-record}
search.ad-resolve-groups.attrmap = map-group-record

search.ad-query-principals.pool = authz
search.ad-query-principals.search-request.baseDN = ${seq:_ad_baseDN}
search.ad-query-principals.search-request.filter = &(sAMAccountType=${global:vars.SAM_NORMAL_USER_ACCOUNT})${seq:filter}
search.ad-query-principals.search-request.attributes = ${global:vars.ad-principal-record}
search.ad-query-principals.attrmap = map-principal-record

search.ad-query-groups.pool = gc
search.ad-query-groups.dc-resolve.override = ${seq:_ad_gc_dn}
search.ad-query-groups.search-request.baseDN = ${seq:_ad_baseDN}
search.ad-query-groups.search-request.filter = &(objectCategory=group)(groupType:${global:vars.LDAP_MATCHING_RULE_BIT_AND}:=${global:vars.ADS_GROUP_TYPE_SECURITY_ENABLED})${seq:filter}
search.ad-query-groups.search-request.attributes = ${global:vars.ad-group-record}
search.ad-query-groups.attrmap = map-group-record

auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C090334_525 = CREDENTIALS_INVALID
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C090334_52e = CREDENTIALS_INCORRECT
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C090334_52f = ACCOUNT_RESTRICTION
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C090334_530 = ACCOUNT_TIME_VIOLATION
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C090334_531 = ACCOUNT_RESTRICTION
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C090334_532 = CREDENTIALS_EXPIRED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C090334_533 = ACCOUNT_DISABLED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C090334_701 = ACCOUNT_EXPIRED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C090334_773 = CREDENTIALS_EXPIRED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C090334_775 = ACCOUNT_LOCKED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903A9_525 = CREDENTIALS_INVALID
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903A9_52e = CREDENTIALS_INCORRECT
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903A9_52f = ACCOUNT_RESTRICTION
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903A9_530 = ACCOUNT_TIME_VIOLATION
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903A9_531 = ACCOUNT_RESTRICTION
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903A9_532 = CREDENTIALS_EXPIRED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903A9_533 = ACCOUNT_DISABLED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903A9_701 = ACCOUNT_EXPIRED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903A9_773 = CREDENTIALS_EXPIRED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903A9_775 = ACCOUNT_LOCKED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903C5_525 = CREDENTIALS_INVALID
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903C5_52e = CREDENTIALS_INCORRECT
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903C5_52f = ACCOUNT_RESTRICTION
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903C5_530 = ACCOUNT_TIME_VIOLATION
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903C5_531 = ACCOUNT_RESTRICTION
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903C5_532 = CREDENTIALS_EXPIRED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903C5_533 = ACCOUNT_DISABLED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903C5_701 = ACCOUNT_EXPIRED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903C5_773 = CREDENTIALS_EXPIRED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.DSID-0C0903C5_775 = ACCOUNT_LOCKED
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS._comment = http://ldapwiki.willeke.com/wiki/Microsoft%20Response%20Codes
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.translation.pattern = ^(?<code>[0-9A-Fa-f]+): LdapErr: (?<err>[^, ]+), comment: (?<comment>[^,]+), data (?<data>[0-9A-Fa-f]+), v(?<version>[0-9A-Fa-f]+)$
auth-check.default.diagnostic.mapping.INVALID_CREDENTIALS.translation.replace = ${err}_${data}

sequence-init.open.500-ad-open-pools = ad-open-pools
sequence.ad-open-pools.010.description = create authz pool
sequence.ad-open-pools.010.type = pool-create
sequence.ad-open-pools.010.pool-create.name = authz
sequence.ad-open-pools.020.description = create authn pool
sequence.ad-open-pools.020.condition.type = var-set
sequence.ad-open-pools.020.condition.var-set.variable = authn_enable
sequence.ad-open-pools.020.type = pool-create
sequence.ad-open-pools.020.pool-create.name = authn
sequence.ad-open-pools.030.description = create gc pool
sequence.ad-open-pools.030.condition.type = var-set
sequence.ad-open-pools.030.condition.var-set.variable = authz_enable
sequence.ad-open-pools.030.type = pool-create
sequence.ad-open-pools.030.pool-create.name = gc

sequence-init.open.600-ad-open = ad-open-vars
sequence.ad-open-vars.010.description = root dse processing
sequence.ad-open-vars.010.type = fetch-record
sequence.ad-open-vars.010.fetch-record.search = ad-rootdse
sequence.ad-open-vars.010.fetch-record.map.defaultNamingContext.name = _ad_default_baseDN
sequence.ad-open-vars.010.fetch-record.map.configurationNamingContext.name = _ad_configDN
sequence.ad-open-vars.010.fetch-record.map.rootDomainNamingContext.name = _ad_rootDN
sequence.ad-open-vars.020.description = default domain
sequence.ad-open-vars.020.type = var-set
sequence.ad-open-vars.020.var-set.variable = _ad_baseDN
sequence.ad-open-vars.020.var-set.value = ${seq:_ad_default_baseDN}
sequence.ad-open-vars.030.description = default domain
sequence.ad-open-vars.030.type = fetch-record
sequence.ad-open-vars.030.fetch-record.search = ad-domain-by-base
sequence.ad-open-vars.030.fetch-record.map.dnsRoot.name = _ad_default_upn_suffix
sequence.ad-open-vars.040.description = namespace handling
sequence.ad-open-vars.040.type = fetch-record
sequence.ad-open-vars.040.fetch-record.search = ad-trust-domains
sequence.ad-open-vars.040.fetch-record.sequence = ad-trust-domains
sequence.ad-open-vars.040.fetch-record.map.name.name = _ad_trustDomain

sequence.ad-resolve-user.010.description = add default upn suffix
sequence.ad-resolve-user.010.type = regex
sequence.ad-resolve-user.010.regex.value = ${seq:PrincipalRecord_PRINCIPAL}
sequence.ad-resolve-user.010.regex.pattern = ^[^@]*$
sequence.ad-resolve-user.010.regex.replacement.PrincipalRecord_PRINCIPAL = ${seq:PrincipalRecord_PRINCIPAL}@${seq:_ad_default_upn_suffix}

sequence.ad-trust-domains.010.description = convert to dn notation
sequence.ad-trust-domains.010.type = regex
sequence.ad-trust-domains.010.regex.value = DC=${seq:_ad_trustDomain}
sequence.ad-trust-domains.010.regex.pattern = \\.
sequence.ad-trust-domains.010.regex.flags = a
sequence.ad-trust-domains.010.regex.replacement._ad_trustDomain_dn = ,DC=
sequence.ad-trust-domains.020.description = override domain for rootdse processing
sequence.ad-trust-domains.020.type = var-set
sequence.ad-trust-domains.020.var-set.variable = _ad_rootdse_dc_override
sequence.ad-trust-domains.020.var-set.value = ${seq:_ad_trustDomain_dn}
sequence.ad-trust-domains.030.description = resolve root domain dn out of domain dn
sequence.ad-trust-domains.030.type = fetch-record
sequence.ad-trust-domains.030.fetch-record.ignore-errors = true
sequence.ad-trust-domains.030.fetch-record.search = ad-rootdse
sequence.ad-trust-domains.040.description = return if no result
sequence.ad-trust-domains.040.condition.type = var-set
sequence.ad-trust-domains.040.condition.not = true
sequence.ad-trust-domains.040.condition.var-set.variable = search_attr_rootDomainNamingContext
sequence.ad-trust-domains.040.type = return
sequence.ad-trust-domains.050.description = add domain to upn suffix mapping
sequence.ad-trust-domains.050.type = var-list-set
sequence.ad-trust-domains.050.var-list-set.variable = ad_upn_suffix_mapping
sequence.ad-trust-domains.050.var-list-set.values.00.var-list = ad_upn_suffix_mapping
sequence.ad-trust-domains.050.var-list-set.values.01.value = ${seq:_ad_trustDomain}=${seq:search_attr_rootDomainNamingContext}
sequence.ad-trust-domains.060.description = add domain to gc mapping
sequence.ad-trust-domains.060.type = var-list-set
sequence.ad-trust-domains.060.var-list-set.variable = ad_gc_mapping
sequence.ad-trust-domains.060.var-list-set.values.00.var-list = ad_gc_mapping
sequence.ad-trust-domains.060.var-list-set.values.01.value = ${seq:_ad_trustDomain_dn}=${seq:search_attr_rootDomainNamingContext}
sequence.ad-trust-domains.070.description = add namespace to collection
sequence.ad-trust-domains.070.type = var-list-set
sequence.ad-trust-domains.070.var-list-set.variable = namespaces
sequence.ad-trust-domains.070.var-list-set.values.00.var-list = namespaces
sequence.ad-trust-domains.070.var-list-set.values.01.value = ${seq:_ad_trustDomain_dn}

sequence.authn.010.description = assume user is upn
sequence.authn.010.type = var-set
sequence.authn.010.var-set.variable = PrincipalRecord_PRINCIPAL
sequence.authn.010.var-set.value = ${seq:user}
sequence.authn.020.description = resolve user
sequence.authn.020.type = call
sequence.authn.020.call.name = ad-resolve-user
sequence.authn.030.description = perform authentication
sequence.authn.030.type = auth-check
sequence.authn.030.auth-check.name = ad-authn

sequence.ad-resolve-upn-suffix-each.010.description = extract gc dn if domain matches
sequence.ad-resolve-upn-suffix-each.010.type = regex
sequence.ad-resolve-upn-suffix-each.010.regex.value = ${seq:forEachValue}
sequence.ad-resolve-upn-suffix-each.010.regex.pattern = ^${seq:_ad_upn_suffix_pattern}=(?<gc>.*)$
sequence.ad-resolve-upn-suffix-each.010.regex.replacement._ad_gc_dn = ${gc}

sequence.ad-resolve-upn-suffix.010.description = convert upn suffix to pattern
sequence.ad-resolve-upn-suffix.010.type = regex
sequence.ad-resolve-upn-suffix.010.regex.value = ${seq:_ad_upn_suffix}
sequence.ad-resolve-upn-suffix.010.regex.pattern = \\.
sequence.ad-resolve-upn-suffix.010.regex.flags = a
sequence.ad-resolve-upn-suffix.010.regex.replacement._ad_upn_suffix_pattern = \\\\.
sequence.ad-resolve-upn-suffix.020.description = resolve gc from upn
sequence.ad-resolve-upn-suffix.020.type = for-each
sequence.ad-resolve-upn-suffix.020.for-each.variable = ad_upn_suffix_mapping
sequence.ad-resolve-upn-suffix.020.for-each.sequence = ad-resolve-upn-suffix-each

sequence.ad-resolve-dc-gc-each.010.description = extract gc dn for domain dc
sequence.ad-resolve-dc-gc-each.010.type = regex
sequence.ad-resolve-dc-gc-each.010.regex.value = ${seq:forEachValue}
sequence.ad-resolve-dc-gc-each.010.regex.pattern = ^${seq:_ad_dc}=(?<gc>.*)$
sequence.ad-resolve-dc-gc-each.010.regex.replacement._ad_gc_dn = ${gc}

sequence.resolve-principal.010.type = call
sequence.resolve-principal.010.call.name = ad-resolve-user
sequence.resolve-principal.015.description = extract upn suffix
sequence.resolve-principal.015.type = regex
sequence.resolve-principal.015.regex.value = ${seq:PrincipalRecord_PRINCIPAL}
sequence.resolve-principal.015.regex.pattern = ^[^@]*@(?<suffix>.*)$
sequence.resolve-principal.015.regex.replacement._ad_upn_suffix = ${suffix}
sequence.resolve-principal.016.type = call
sequence.resolve-principal.016.call.name = ad-resolve-upn-suffix
sequence.resolve-principal.017.description = set gc dn as default root if not available
sequence.resolve-principal.017.type = var-set
sequence.resolve-principal.017.condition.type = var-set
sequence.resolve-principal.017.condition.not = true
sequence.resolve-principal.017.condition.var-set.variable = _ad_gc_dn
sequence.resolve-principal.017.var-set.variable = _ad_gc_dn
sequence.resolve-principal.017.var-set.value = ${seq:_ad_rootDN}
sequence.resolve-principal.020.description = locate upn
sequence.resolve-principal.020.type = fetch-record
sequence.resolve-principal.020.fetch-record.search = ad-resolve-upn
sequence.resolve-principal.020.fetch-record.map._dn.name = PrincipalRecord_DN
sequence.resolve-principal.030.description = error if no PrincipalRecord_DN
sequence.resolve-principal.030.type = stop
sequence.resolve-principal.030.condition.type = var-set
sequence.resolve-principal.030.condition.not = true
sequence.resolve-principal.030.condition.var-set.variable = PrincipalRecord_DN
sequence.resolve-principal.040.description = fetch user fields
sequence.resolve-principal.040.type = search-open
sequence.resolve-principal.040.search-open.search = ad-principal-fetch
sequence.resolve-principal.040.search-open.variable = query

sequence.resolve-groups.010.description = set dn
sequence.resolve-groups.010.type = var-set
sequence.resolve-groups.010.var-set.variable = _ad_dn
sequence.resolve-groups.010.var-set.value = ${seq:dn}
sequence.resolve-groups.020.description = extract domain component
sequence.resolve-groups.020.type = regex
sequence.resolve-groups.020.regex.value = ${seq:_ad_dn}
sequence.resolve-groups.020.regex.pattern = ^.*?(?<baseDN>DC=.*)?$
sequence.resolve-groups.020.regex.replacement._ad_dc = ${baseDN}
sequence.resolve-groups.030.type = for-each
sequence.resolve-groups.030.for-each.variable = ad_gc_mapping
sequence.resolve-groups.030.for-each.sequence = ad-resolve-dc-gc-each
sequence.resolve-groups.040.description = set pool
sequence.resolve-groups.040.type = var-set
sequence.resolve-groups.040.var-set.variable = _ad_pool
sequence.resolve-groups.040.var-set.value = gc
sequence.resolve-groups.050.description = set base dn
sequence.resolve-groups.050.type = var-set
sequence.resolve-groups.050.var-set.variable = _ad_baseDN
sequence.resolve-groups.050.var-set.value =
sequence.resolve-groups.060.description = query groups
sequence.resolve-groups.060.type = search-open
sequence.resolve-groups.060.search-open.search = ad-resolve-groups
sequence.resolve-groups.060.search-open.variable = queryGC
sequence.resolve-groups.070.description = set pool
sequence.resolve-groups.070.type = var-set
sequence.resolve-groups.070.var-set.variable = _ad_pool
sequence.resolve-groups.070.var-set.value = authz
sequence.resolve-groups.080.description = set gc override
sequence.resolve-groups.080.type = var-set
sequence.resolve-groups.080.var-set.variable = _ad_gc_dn
sequence.resolve-groups.080.var-set.value =
sequence.resolve-groups.090.description = set base dn
sequence.resolve-groups.090.type = var-set
sequence.resolve-groups.090.var-set.variable = _ad_baseDN
sequence.resolve-groups.090.var-set.value = ${seq:_ad_dc}
sequence.resolve-groups.100.description = query groups
sequence.resolve-groups.100.type = search-open
sequence.resolve-groups.100.search-open.search = ad-resolve-groups
sequence.resolve-groups.100.search-open.variable = queryAuthz

sequence.query-principals.010.description = set base as namespace
sequence.query-principals.010.type = var-set
sequence.query-principals.010.var-set.variable = _ad_baseDN
sequence.query-principals.010.var-set.value = ${seq:namespace}
sequence.query-principals.020.description = query principals
sequence.query-principals.020.type = search-open
sequence.query-principals.020.search-open.search = ad-query-principals
sequence.query-principals.020.search-open.variable = query

sequence.query-groups.010.description = set base dn
sequence.query-groups.010.type = var-set
sequence.query-groups.010.var-set.variable = _ad_baseDN
sequence.query-groups.010.var-set.value = ${seq:namespace}
sequence.query-groups.020.description = resolve dc
sequence.query-groups.020.type = var-set
sequence.query-groups.020.var-set.variable = _ad_dc
sequence.query-groups.020.var-set.value = ${seq:namespace}
sequence.query-groups.030.description = resolve gc out of namespace
sequence.query-groups.030.type = for-each
sequence.query-groups.030.for-each.variable = ad_gc_mapping
sequence.query-groups.030.for-each.sequence = ad-resolve-dc-gc-each
sequence.query-groups.040.description = query groups
sequence.query-groups.040.type = search-open
sequence.query-groups.040.search-open.search = ad-query-groups
sequence.query-groups.040.search-open.variable = query
